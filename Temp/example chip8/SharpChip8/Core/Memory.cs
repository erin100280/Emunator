using System;

namespace SharpChip8.Core
{
	public class Memory
	{
		public const uint MemorySize = 4096;
        public const ushort StartAddress = 0x200; // 512
	    public const int RomSize = 0x1FF; 			// Mémoire morte 511 octets
	    public const int StartRomAddress = 0x0;	// Adresse de début de la Ram
	    public const int StopRomAddress = 0x1FF;	// Adresse de fin de la Ram
	    public const int RamSize = 0xE00;			// Mémoire vive de 3584 octets
	    public const int StartRamAddress = 0x200; 	// Adresse de début de la Rom
	    private const int StartChip8Font = 0x00;  // Les fonts chip8 sont stockés au débuts de la mémoire
        private const int StopChip8Font = 0x50; // 75 
        private const int StartSuperFont = 0x51; // Adresse de début des fonts Super Chip-8
        private const int StopSuperFont = 0xF0; // Adresse de fin des fonts Super Chip-8

	    private const int END_ADDRESS_CHIP8_FONTS = 0x4F;   // Fin des fonts chip8
		
		private static byte[] Fontset = {
			0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
			0x20, 0x60, 0x20, 0x20, 0x70, // 1
			0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
			0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
			0x90, 0x90, 0xF0, 0x10, 0x10, // 4
			0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
			0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
			0xF0, 0x10, 0x20, 0x40, 0x40, // 7
			0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
			0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
			0xF0, 0x90, 0xF0, 0x90, 0x90, // A
			0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
			0xF0, 0x80, 0x80, 0x80, 0xF0, // C
			0xE0, 0x90, 0x90, 0x90, 0xE0, // D
			0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
			0xF0, 0x80, 0xF0, 0x80, 0x80  // F	
		};

        private static byte[] SuperFontSet = {
            0xF0, 0xF0, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0xF0, 0xF0, // 0
            0x20, 0x20, 0x60, 0x60, 0x20, 0x20, 0x20, 0x20, 0x70, 0x70, // 1
            0xF0, 0xF0, 0x10, 0x10, 0xF0, 0xF0, 0x80, 0x80, 0xF0, 0xF0, // 2
            0xF0, 0xF0, 0x10, 0x10, 0xF0, 0xF0, 0x10, 0x10, 0xF0, 0xF0, // 3
            0x90, 0x90, 0x90, 0x90, 0xF0, 0xF0, 0x10, 0x10, 0x10, 0x10, // 4
            0xF0, 0xF0, 0x80, 0x80, 0xF0, 0xF0, 0x10, 0x10, 0xF0, 0xF0, // 5
            0xF0, 0xF0, 0x80, 0x80, 0xF0, 0xF0, 0x90, 0x90, 0xF0, 0xF0, // 6
            0xF0, 0xF0, 0x10, 0x10, 0x20, 0x20, 0x40, 0x40, 0x40, 0x40, // 7
            0xF0, 0xF0, 0x90, 0x90, 0xF0, 0xF0, 0x90, 0x90, 0xF0, 0xF0, // 8
            0xF0, 0xF0, 0x90, 0x90, 0xF0, 0xF0, 0x10, 0x10, 0xF0, 0xF0, // 9
            0xF0, 0xF0, 0x90, 0x90, 0xF0, 0xF0, 0x90, 0x90, 0x90, 0x90, // A
            0xE0, 0xE0, 0x90, 0x90, 0xE0, 0xE0, 0x90, 0x90, 0xE0, 0xE0, // B
            0xF0, 0xF0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xF0, 0xF0, // C
            0xE0, 0xE0, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0xE0, 0xE0, // D
            0xF0, 0xF0, 0x80, 0x80, 0xF0, 0xF0, 0x80, 0x80, 0xF0, 0xF0, // E
            0xF0, 0xF0, 0x80, 0x80, 0xF0, 0xF0, 0x80, 0x80, 0x80, 0x80  // F
        };
		
		private byte [] _rom; // Mémoire interne

        public byte[] Rom
        {
            get { return _rom; }
            set { _rom = value; }
        }
		
		public Memory ()
		{
			_rom = new byte[Memory.MemorySize];
			Reset();
		}
		
		public void LoadFontset()
		{
			for (uint i = StartChip8Font; i < StopChip8Font; i++)
				_rom[i] = Memory.Fontset[i];
		}

        public void LoadSuperFont()
        {
            for (uint i = StartSuperFont; i < StopSuperFont; i++)
                _rom[i] = Memory.SuperFontSet[i];
        }

        public void Initialize()
		{
			for (uint i = Memory.StartAddress; i < Memory.MemorySize; i++)
				_rom[i] = 0x0;
		}
		
		public void Reset()
		{
			Initialize();
			LoadFontset();
            LoadSuperFont();
		}
	}
}

